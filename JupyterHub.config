# JupyterHub configuration
c.JupyterHub.bind_url = 'http://0.0.0.0:8000'  # Bind to all interfaces
c.JupyterHub.hub_ip = '127.0.0.1'  # Hub IP

# Built-in PAM Authenticator configuration (no extra import/package needed)
c.JupyterHub.authenticator_class = 'jupyterhub.auth.PAMAuthenticator'
c.PAMAuthenticator.service = 'login'  # Use the system's login service for PAM (leverages OS LDAP via PAM)
c.SystemdSpawner.extra_systemd_environment = {
    'PAM_TYPE': 'login'
}

# Optional: Additional PAM settings if needed (e.g., for session handling)
# c.PAMAuthenticator.open_sessions = False  # Disable opening PAM sessions (useful if causing issues)
# c.PAMAuthenticator.encoding = 'utf8'     # Encoding for PAM interactions

# Spawner settings (use systemdspawner for system users)
c.JupyterHub.spawner_class = 'systemdspawner.SystemdSpawner'
c.SystemdSpawner.mem_limit = '20G'  # Memory limit per user
c.SystemdSpawner.cpu_limit = 2.0  # CPU limit per user
# 2 CPUs per user is the max given that upto 14 users could be on one VM
# 20 GB RAM per user max - could go to 30-32 MAX.

# Path to Jupyter Notebook in Mamba environment
c.Spawner.cmd = ['/opt/miniforge3/envs/jupyterhub/bin/jupyterhub-singleuser']

## Additional ##
c.Authenticator.allow_all = True

# ==============================
# Safe pre-spawn hook for home directories
# Works with local and LDAP/PAM users
# ==============================

import os
import pwd
from jupyterhub.spawner import Spawner

def safe_ensure_home_dir(spawner: Spawner):
    """
    Pre-spawn hook: ensures the user's home directory exists with correct ownership.
    Safe for LDAP users who may not exist locally yet.
    """
    try:
        pw_record = pwd.getpwnam(spawner.user.name)
        home = pw_record.pw_dir

        if not os.path.exists(home):
            os.makedirs(home, exist_ok=True)
            os.chown(home, pw_record.pw_uid, pw_record.pw_gid)
            os.chmod(home, 0o700)
            print(f"[pre_spawn_hook] Created home directory for {spawner.user.name}: {home}")
        else:
            print(f"[pre_spawn_hook] Home directory already exists for {spawner.user.name}: {home}")

    except KeyError:
        # User does not exist locally (LDAP-only). Skip creation to avoid 500 error.
        print(f"[pre_spawn_hook] User {spawner.user.name} not found locally. Skipping home creation.")

# Attach the hook
c.Spawner.pre_spawn_hook = safe_ensure_home_dir

# Mig autoassign
def pre_spawn_hook(spawner):
    slices = assign_mig.detect_mig_slices()
    user_index = spawner.user._uid
    assign_mig.assign_mig_to_user(user_index, slices)

c.Spawner.pre_spawn_hook = pre_spawn_hook
